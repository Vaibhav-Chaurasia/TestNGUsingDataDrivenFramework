Integration of Extent Report

1. Add POM dependency in pom.xml file
<dependency>
	<groupId>com.aventstack</groupId>
	<artifactId>extentreports</artifactId>
	<version>4.0.6</version>
</dependency>



2. Then Go to Base Class, and write the code to integrate reports, in the last

/*---------------------------------------Start of Extent Report---------------------------------------------------*/
	//This method helps to access the driver i.e. way to access the various elements and events like click, tap etc.
	public static WebDriver getDriver() {
		return driver;
	}

	//The ExtentHtmlReporter creates a rich standalone HTML file. It allows several configuration options via the config() method.
	public ExtentHtmlReporter getHtmlReporter() {
		return htmlReporter;
	}

	//This method helps to set the HTML reporter, so that HTML reporter components will be accessible.
	public void setHtmlReporter(ExtentHtmlReporter htmlReporter) {
		BaseClass.htmlReporter = htmlReporter;
	}

	//Extent Reports. Beautifully crafted reports and realtime analytics so you can look at your tests in a totally different way. 
	public static ExtentReports getExtent() {
		return extent;
	}

	//This method helps to set the ExtentReports, so that HTML reporter components will be accessible.
	public static void setExtent(ExtentReports extent) {
		BaseClass.extent = extent;
	}

	//This method is used to set the tests which is executed.
	public static void setTest(ExtentTest test) {
		BaseClass.test = test;
	}

	protected static ExtentHtmlReporter htmlReporter;
	protected static ExtentReports extent;
	protected static ExtentTest test;

	/*This function is executed before the printing of HTML Report. Basically, it does the basic settings before report printing i.e.
	 * Set the Path
	 * Get Host name
	 * Read Excel Data
	 * Set Report Title
	 * Set Theme for HTML report
	 * Other basic settings before report prints
	 */
	@BeforeSuite(alwaysRun = true)
	public void startReport() throws IOException {
		//Delete the existing folder where report generated
		ElementUtils.deleteDirectory("ExecutionTestNG");

		// initialize the HtmlReporter
		htmlReporter = new ExtentHtmlReporter(System.getProperty("user.dir") + "/ExecutionTestNG/SparkReport.html");

		// Create an object of Extent Reports
		htmlReporter.loadXMLConfig(System.getProperty("user.dir") + "/extent-config.xml");

		//initialize ExtentReports and attach the HtmlReporter
		extent = new ExtentReports();
		extent.attachReporter(htmlReporter);

		//configuration items to change the look and feel
		//add content, manage tests etc
		extent.setSystemInfo("Host Name", Utils.SystemInfo.getHostName());
		htmlReporter.config().setDocumentTitle("Simple Automation Report");
		htmlReporter.config().setReportName("Test Report");
		extent.setSystemInfo("User Name", "Vaibhav Chaurasia");
		htmlReporter.config().setTheme(Theme.DARK);
		htmlReporter.config().setTimeStampFormat("EEEE, MMMM dd, yyyy, hh:mm a '('zzz')'");
		//extent.setSystemInfo("Environment", Environment.ReadExcelData("Test_Environment", 0, 0));
		//extent.setSystemInfo("Test Browser", Environment.ReadExcelData("Browser", 1, 0));
	}


	/*This method works after the report prints and does the several functions i.e.,
	 * Quit the Driver working for reporting
	 * Print logs if any
	 */
	@AfterTest(alwaysRun = true)
	public static void tearDown() throws Exception {
		if (getDriver() != null) {
			try {
				Log.info("Quiting Driver in @after Test Class TestBase.java");
				Log.info("Extent Report has been flushed Successfully");
				htmlReporter.stop();
			} catch (Exception e) {
				Log.info("Unable to Quit Driver");
				TestNG0015Log4j.ListenerITestListenerWithLog4j.Logs.error(e);
			}
		}
	}


	/*This method works after the Basic settings is completed i.e. at the time of reporting. Basically it prints the status of the
	 * result i.e.,
	 * Success and manage the color
	 * Failure and manage the color
	 * Maintain to Skip the test and manage its color
	 * If test fails, then print the cause of failure.
	 * */
	@AfterMethod (alwaysRun = true)
	public void getResult(ITestResult result) throws IOException {
		test = extent.createTest(result.getMethod().getMethodName());

		if (result.getStatus() == ITestResult.FAILURE) {
			test.log(Status.FAIL, result.getThrowable(), MediaEntityBuilder
					.createScreenCaptureFromPath(ElementUtils.getScreenShot(driver, result.getName())).build());
		}
		else if (result.getStatus() == ITestResult.SKIP) {
			test.log(Status.SKIP, MarkupHelper.createLabel(result.getName() + " - Test Case Skipped", ExtentColor.ORANGE));
		}
		else if (result.getStatus() == ITestResult.SUCCESS) {
			test.log(Status.PASS, MarkupHelper.createLabel(result.getName() + " - Test Case Passed", ExtentColor.GREEN));
		}
	}

	
	@AfterSuite
	public void teardown() {
		//to write or update test information to reporter
		extent.flush();
	}
	/*---------------------------------------End of Extent Report---------------------------------------------------*/


3. Create UtilClass and add some methods to perform some functionalities
	//This method deletes the file into the particular directory i.e., a Single file
	public static void deleteDirectory(final String file) {

		FilenameFilter textFilter = new FilenameFilter() {
			public boolean accept(File dir, String name) {
				return name.equalsIgnoreCase(file);
			}
		};

		File dir = new File(System.getProperty("user.dir"));
		File[] filesList = dir.listFiles(textFilter);

		for (File file1 : filesList) {
			recursiveDelete(file1);
		}
		Log.info("File Deleted SuccessFully");
	}


	//This function delete the files in an recursive way i.e. all the files in the folder
	public static void recursiveDelete(File file) {
		// to end the recursive loop

		if (!file.exists())
			return;

		if (file.isDirectory()) {
			for (File f : file.listFiles()) {
				// call recursively
				recursiveDelete(f);
			}
		}
		// call delete to delete files and empty directory
		file.delete();
		sleep();
		sleep();
		Log.info("Deleted file/folder: " + file.getAbsolutePath());
	}

	//This method used to get screenshot and save it in the folder. The screenshot saved as Path/Name20201231125959.png
	public static String getScreenShot(WebDriver driver, String screenshotName) throws IOException {
		String dateName = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
		System.out.println("Driver \t" + driver);
		TakesScreenshot ts = (TakesScreenshot) driver;
		File source = ts.getScreenshotAs(OutputType.FILE);
		String destination = screenShotPath + screenshotName + dateName + ".png";
		File finalDestination = new File(destination);
		FileUtils.copyFile(source, finalDestination);
		return destination;
	}

4. Add Logs.java file given in TestNG0015Log4j -> ListenerITestListenerWithLog4j folder
5. Add SystemInfo.java file given in src/main/java -> Utils folder
6. Go to Base class and edit some information in startReport() method i.e. Name, Path of Files etc.
7. Add extent-config.xml file in the root folder given in root folder.

8. Now, create the test cases and run them and see the result.